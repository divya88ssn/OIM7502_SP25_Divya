{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4a7f66be",
   "metadata": {},
   "source": [
    "### US Metro Regional Housing Affordability Analysis \n",
    "##### Datasets - Zillow Metro Home Price Index & Rental Affordability Index\n",
    "##### To run this notebook you need the following libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c514884c-4f52-4431-90e1-7fc18ea86c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install these if needed\n",
    "# !pip install streamlit pydeck pandas numpy scikit-learn matplotlib seaborn\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pydeck as pdk\n",
    "from sklearn.cluster import KMeans\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# --- Section 1: Load and Prepare Data ---\n",
    "\n",
    "# Read raw Zillow datasets\n",
    "zhvi_df = pd.read_csv(\"data/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv\")\n",
    "zori_df = pd.read_csv(\"data/Metro_zori_uc_sfrcondomfr_sm_month.csv\")\n",
    "\n",
    "# Constants\n",
    "d = 0.20       # Down payment rate\n",
    "r = 0.065 / 12 # Monthly interest rate\n",
    "i = 0.004      # Insurance rate\n",
    "t = 0.0125     # Property tax rate\n",
    "n = 360        # Loan term in months\n",
    "\n",
    "# Melt ZHVI and ZORI to long format\n",
    "zhvi_long = zhvi_df.melt(\n",
    "    id_vars=['RegionID', 'RegionName', 'RegionType', 'StateName', 'SizeRank'],\n",
    "    var_name='Date',\n",
    "    value_name='ZHVI'\n",
    ")\n",
    "zori_long = zori_df.melt(\n",
    "    id_vars=['RegionID', 'RegionName', 'RegionType', 'StateName', 'SizeRank'],\n",
    "    var_name='Date',\n",
    "    value_name='ZORI'\n",
    ")\n",
    "\n",
    "# Drop missing values\n",
    "zhvi_long = zhvi_long.dropna(subset=['ZHVI'])\n",
    "zori_long = zori_long.dropna(subset=['ZORI'])\n",
    "\n",
    "# Convert Date\n",
    "zhvi_long['Date'] = pd.to_datetime(zhvi_long['Date'])\n",
    "zori_long['Date'] = pd.to_datetime(zori_long['Date'])\n",
    "\n",
    "# Calculate Total Monthly Payment (ownership cost)\n",
    "zhvi_long['Mortgage'] = zhvi_long['ZHVI'] * (1 - d) * r * (1 + r) ** n / ((1 + r) ** n - 1)\n",
    "zhvi_long['TotalMonthlyPayment'] = zhvi_long['Mortgage'] + zhvi_long['ZHVI'] * ((i + t + 0.005) / 12)\n",
    "\n",
    "# Calculate Income Needed\n",
    "zhvi_long['IncomeNeededToAffordHome'] = 12 * zhvi_long['TotalMonthlyPayment'] / 0.3\n",
    "zori_long['IncomeNeededToAffordRent'] = 12 * zori_long['ZORI'] / 0.3\n",
    "\n",
    "# Calculate YoY % Changes\n",
    "zhvi_long = zhvi_long.sort_values(['RegionName', 'Date'])\n",
    "zori_long = zori_long.sort_values(['RegionName', 'Date'])\n",
    "\n",
    "zhvi_long['ZHVI_YoY'] = zhvi_long.groupby('RegionName')['ZHVI'].pct_change(periods=12) * 100\n",
    "zori_long['ZORI_YoY'] = zori_long.groupby('RegionName')['ZORI'].pct_change(periods=12) * 100\n",
    "\n",
    "# --- Section 2: Create Summary, Cluster, Anomaly Detection ---\n",
    "\n",
    "# Get latest available date\n",
    "latest_date = zhvi_long['Date'].max()\n",
    "\n",
    "# Latest snapshot\n",
    "latest_home = zhvi_long[zhvi_long['Date'] == latest_date][['RegionName', 'TotalMonthlyPayment', 'IncomeNeededToAffordHome']]\n",
    "latest_rent = zori_long[zori_long['Date'] == latest_date][['RegionName', 'IncomeNeededToAffordRent']]\n",
    "\n",
    "region_summary = pd.merge(latest_home, latest_rent, on='RegionName', how='inner')\n",
    "\n",
    "# Average affordability metrics\n",
    "avg_features = region_summary[['IncomeNeededToAffordHome', 'IncomeNeededToAffordRent']].dropna()\n",
    "kmeans_avg = KMeans(n_clusters=3, random_state=42)\n",
    "region_summary['Cluster_Avg'] = kmeans_avg.fit_predict(avg_features)\n",
    "\n",
    "# Volatility metrics (standard deviation of YoY %)\n",
    "zhvi_vol = zhvi_long.groupby('RegionName')['ZHVI_YoY'].std().reset_index(name='Volatility_ZHVI')\n",
    "zori_vol = zori_long.groupby('RegionName')['ZORI_YoY'].std().reset_index(name='Volatility_ZORI')\n",
    "\n",
    "volatility = pd.merge(zhvi_vol, zori_vol, on='RegionName', how='inner')\n",
    "\n",
    "# Only use rows that have both volatilities available\n",
    "vol_clean = volatility.dropna(subset=['Volatility_ZHVI', 'Volatility_ZORI']).copy()\n",
    "\n",
    "# Cluster on clean volatility data\n",
    "vol_features = vol_clean[['Volatility_ZHVI', 'Volatility_ZORI']]\n",
    "kmeans_vol = KMeans(n_clusters=3, random_state=42)\n",
    "vol_clean['Cluster_Vol'] = kmeans_vol.fit_predict(vol_features)\n",
    "\n",
    "# Merge cluster labels back\n",
    "volatility = pd.merge(\n",
    "    volatility[['RegionName']],\n",
    "    vol_clean[['RegionName', 'Cluster_Vol']],\n",
    "    on='RegionName',\n",
    "    how='left'\n",
    ")\n",
    "\n",
    "# Now you can safely merge volatility into region_summary\n",
    "region_summary = pd.merge(region_summary, volatility, on='RegionName', how='left')\n",
    "\n",
    "# Recalculate Anomaly after merging volatility clusters\n",
    "region_summary['Is_Anomaly'] = 0\n",
    "region_summary.loc[\n",
    "    (region_summary['IncomeNeededToAffordHome'] > 400000) | (region_summary['Cluster_Vol'] == 2),\n",
    "    'Is_Anomaly'\n",
    "] = 1\n",
    "\n",
    "# Add random lat/lon\n",
    "np.random.seed(42)\n",
    "region_summary['lat'] = np.random.uniform(25, 49, size=len(region_summary))\n",
    "region_summary['lon'] = np.random.uniform(-125, -67, size=len(region_summary))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36ae8a3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-26 16:27:38.369 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.371 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.373 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.374 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.375 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.413 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.511 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.512 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.518 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.525 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.526 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.534 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.542 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.543 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.544 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.545 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.547 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.549 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.550 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.553 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.557 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.559 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.561 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.563 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.564 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.565 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.566 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.569 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.570 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.570 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.574 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.575 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.575 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.577 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.579 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.580 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.582 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.659 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.992 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.993 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.993 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:38.995 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.068 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.448 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.448 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.450 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.451 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.452 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.453 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:39.675 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:40.471 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:40.472 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:40.473 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:40.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:40.559 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:41.489 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:41.490 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:41.491 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-26 16:27:41.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# --- Section 3: Build Streamlit App ---\n",
    "\n",
    "st.set_page_config(page_title=\"US Metro Housing Affordability Explorer\", layout=\"wide\")\n",
    "\n",
    "st.title(\"🏡 US Metro Housing Affordability Explorer\")\n",
    "st.markdown(f\"**Data reflects latest available month:** {latest_date.strftime('%B %Y')}\")\n",
    "\n",
    "# Show Metro Map\n",
    "layer = pdk.Layer(\n",
    "    'ScatterplotLayer',\n",
    "    data=region_summary,\n",
    "    get_position='[lon, lat]',\n",
    "    get_radius=50000,\n",
    "    get_fill_color='[0, 100, 200, 160]',\n",
    "    pickable=True,\n",
    ")\n",
    "\n",
    "view_state = pdk.ViewState(latitude=37.0902, longitude=-95.7129, zoom=3.5)\n",
    "\n",
    "deck_map = pdk.Deck(\n",
    "    layers=[layer],\n",
    "    initial_view_state=view_state,\n",
    "    tooltip={\"text\": \"{RegionName}\"}\n",
    ")\n",
    "\n",
    "st.pydeck_chart(deck_map)\n",
    "\n",
    "# Dropdown to select a region\n",
    "selected_region = st.selectbox(\"🔎 Select a Metro Region:\", region_summary['RegionName'].sort_values())\n",
    "\n",
    "if selected_region:\n",
    "    region_data = region_summary[region_summary['RegionName'] == selected_region].iloc[0]\n",
    "\n",
    "    st.header(f\"📍 {selected_region} - Affordability Details\")\n",
    "\n",
    "    st.markdown(\"🏡 **30-year fixed mortgage assumed: 20% downpayment, 6.5% interest, including taxes, insurance, maintenance.**\")\n",
    "\n",
    "    col1, col2, col3 = st.columns(3)\n",
    "\n",
    "    with col1:\n",
    "        st.metric(\"Total Monthly Payment (Mortgage)\", f\"${region_data['TotalMonthlyPayment']:,.0f}\")\n",
    "    with col2:\n",
    "        st.metric(\"Monthly Income Needed to Afford Buying\", f\"${region_data['IncomeNeededToAffordHome']:,.0f}\")\n",
    "    with col3:\n",
    "        st.metric(\"Monthly Income Needed to Afford Renting\", f\"${region_data['IncomeNeededToAffordRent']:,.0f}\")\n",
    "\n",
    "    st.subheader(\"🏘️ Affordability Cluster\")\n",
    "    if region_data['Cluster_Avg'] == 0:\n",
    "        st.success(\"🟢 Lower cost region (more affordable).\")\n",
    "    elif region_data['Cluster_Avg'] == 1:\n",
    "        st.warning(\"🟡 Mid-tier cost region.\")\n",
    "    elif region_data['Cluster_Avg'] == 2:\n",
    "        st.error(\"🔴 High cost region (challenging affordability).\")\n",
    "\n",
    "    st.subheader(\"📈 Volatility Cluster\")\n",
    "    if region_data['Cluster_Vol'] == 0:\n",
    "        st.success(\"🟢 Stable prices over time.\")\n",
    "    elif region_data['Cluster_Vol'] == 1:\n",
    "        st.warning(\"🟡 Moderate price volatility.\")\n",
    "    elif region_data['Cluster_Vol'] == 2:\n",
    "        st.error(\"🔴 Highly unstable prices.\")\n",
    "\n",
    "    st.subheader(\"🚨 Anomaly Detection\")\n",
    "    if region_data['Is_Anomaly'] == 1:\n",
    "        st.error(\"⚠️ Region flagged as anomaly (extreme affordability or volatility).\")\n",
    "    else:\n",
    "        st.success(\"✅ Region within expected affordability and volatility ranges.\")\n",
    "\n",
    "# --- Section 4: Boxplots and Trendlines ---\n",
    "\n",
    "st.header(\"📊 Affordability Distribution Across Metros\")\n",
    "\n",
    "# Boxplots\n",
    "st.subheader(\"Income Needed to Afford Home\")\n",
    "fig1, ax1 = plt.subplots(figsize=(20, 6))\n",
    "sns.boxplot(x=region_summary['IncomeNeededToAffordHome'], ax=ax1)\n",
    "ax1.set_title('Distribution of Income Needed to Afford Home')\n",
    "st.pyplot(fig1)\n",
    "\n",
    "st.subheader(\"Income Needed to Afford Rent\")\n",
    "fig2, ax2 = plt.subplots(figsize=(20, 6))\n",
    "sns.boxplot(x=region_summary['IncomeNeededToAffordRent'], ax=ax2)\n",
    "ax2.set_title('Distribution of Income Needed to Afford Rent')\n",
    "st.pyplot(fig2)\n",
    "\n",
    "# Trendlines over Time\n",
    "st.header(\"📈 YoY Trends Over Time\")\n",
    "\n",
    "# ZHVI YoY trend\n",
    "st.subheader(\"ZHVI (Home Value Index) YoY % Change Over Time\")\n",
    "fig3, ax3 = plt.subplots(figsize=(20, 8))\n",
    "for region in zhvi_long['RegionName'].unique()[:10]:  # Limit to 10 for clarity\n",
    "    temp = zhvi_long[zhvi_long['RegionName'] == region]\n",
    "    ax3.plot(temp['Date'], temp['ZHVI_YoY'], label=region)\n",
    "ax3.axhline(0, color='black', linestyle='--')\n",
    "ax3.set_title('ZHVI YoY % Change')\n",
    "ax3.legend(fontsize='small')\n",
    "st.pyplot(fig3)\n",
    "\n",
    "# ZORI YoY trend\n",
    "st.subheader(\"ZORI (Rental Index) YoY % Change Over Time\")\n",
    "fig4, ax4 = plt.subplots(figsize=(20, 8))\n",
    "for region in zori_long['RegionName'].unique()[:10]:  # Limit to 10 for clarity\n",
    "    temp = zori_long[zori_long['RegionName'] == region]\n",
    "    ax4.plot(temp['Date'], temp['ZORI_YoY'], label=region)\n",
    "ax4.axhline(0, color='black', linestyle='--')\n",
    "ax4.set_title('ZORI YoY % Change')\n",
    "ax4.legend(fontsize='small')\n",
    "st.pyplot(fig4)\n",
    "\n",
    "# Footer\n",
    "st.caption(\"🔵 Built with Zillow ZHVI and ZORI datasets | Part of US Metro Housing Affordability Analysis | Powered by Streamlit 🚀\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "75b59c48-f7e5-48e7-84e2-dd46ec7f3b39",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
